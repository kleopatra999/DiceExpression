//
//  Random.swift
//  DiceExpression
//
//  Created by Marco Conti on 10/03/16.
//  Copyright Â© 2016 com.marco83. All rights reserved.
//

import Foundation

/**
Returns a random integer between two integer, extremes included.
- parameter from: one of the extremes of the range to pick from
- parameter to: the other exteme of the range to pick from
- note: The randomness generated by this function is not guaranteed to be cryptographically secure
*/
public func randomInteger(from: Int, to: Int) -> Int {
    let (lowerLimit, higherLimit) = from < to ? (from, to) : (to, from)
    if lowerLimit == higherLimit {
        return lowerLimit
    }
    let range = higherLimit - lowerLimit + 1
    return lowerLimit + Int(arc4random_uniform(UInt32(range)))
}

extension CollectionType where Index.Distance == Int, Index == Int {
 
    /**
     Choose a random element from the collection.
     - return: a random element, or .None if the collection is empty
     - note: The randomness generated by this function is not guaranteed to be cryptographically secure. 
     - precondition: The collections has finite size.
    */
    public func randomChoice() -> Generator.Element? {
        if self.count == 0 {
            return .None
        }
        let index = randomInteger(0, to: self.count-1)
        return self[index]
    }
    
    /**
     Choose a number of random elements from the collection. The same element won't be picked up twice.
     
     - parameter numberOfElements: the number of elements to pick from the collection
     - returns: the chosen numberOfElements. If there are less elements in the collection than the number of elements requested,
        it will return all elements in an arbitrary order
     - note: The randomness generated by this function is not guaranteed to be cryptographically secure.
     - precondition: The collections has finite size.
     */
    public func randomElements(numberOfElements: UInt) -> [Generator.Element] {
        if self.count == 0 {
            return []
        }
        
        let targetSize = self.count < Int(numberOfElements) ? self.count : Int(numberOfElements)

        // create a list of all indexes
        var possibleIndexes = Array(0...self.count-1)
        
        // repeat for the number of elements:
        return (1...targetSize).map { _ in
            let index = possibleIndexes.randomChoice()! // pick an index
            let value = self[index] // map to the matching element
            possibleIndexes.removeAtIndex(possibleIndexes.indexOf(index)!) // remove that index so that it can't be picked again
            return value
        }
    }
    
    /**
    Creates a sequence of the given size from elements of the collection. The same element might appear multiple times in the list.
    
    - param size: the size of the sequence
    - returns: a sequence of elements from the collection, with possible repetitions
    - note: The randomness generated by this function is not guaranteed to be cryptographically secure.
    - precondition: The collections has finite size.
    */
    public func randomSequence(size: UInt) -> [Generator.Element] {
        if self.count == 0 {
            return []
        }

        // repeat for the number of elements:
        return (1...size).map { _ in return self.randomChoice()! }
    }
}
